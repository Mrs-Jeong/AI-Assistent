# Шаг 1: Импорт необходимых библиотек

import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize, sent_tokenize

# nltk.download('punkt')
# nltk.download('stopwords') # скачать пакет стоп-слов

import nltk

# nltk.download('punkt_tab')
# nltk.download('punkt')
# nltk.download('wordnet')
# nltk.download('omw-1.4')

# Пример текста
# text = """
# Отец мой Андрей Петрович Гринев в молодости своей служил при графе Минихе, и вышел в отставку премьер-майором в 17.. году. С тех пор жил он в своей Симбирской деревни, где и женился на девице Авдотьи Васильевне Ю., дочери бедного тамошнего дворянина. Нас было девять человек детей. Все мои братья и сестры умерли во младенчестве.
# Матушка была еще мною брюхата, как уже я был записан в Семеновский полк сержантом, по милости маиора гвардии князя Б., близкого нашего родственника. Если бы паче всякого чаяния матушка родила дочь, то батюшка объявил бы куда следовало о смерти неявившегося сержанта и дело тем бы и кончилось. Я считался в отпуску до окончания наук. В то время воспитывались мы не по нонешнему. С пятилетнего возраста отдан я был на руки стремянному Савельичу, за трезвое поведение пожалованному мне в дядьки. Под его надзором на двенадцатом году выучился я русской грамоте и мог очень здраво судить о свойствах борзого кобеля. В это время батюшка нанял для меня француза, мосье Бопре, которого выписали из Москвы вместе с годовым запасом вина и прованского масла. Приезд его сильно не понравился Савельичу. «Слава богу» — ворчал он про себя — «кажется, дитя умыт, причесан, накормлен. Куда как нужно тратить лишние деньги, и нанимать мусье, как будто и своих людей не стало!»
# Бопре в отечестве своем был парикмахером, потом в Пруссии солдатом, потом приехал в Россию pour Йtre outchitel, не очень понимая значения этого слова. Он был добрый малый, но ветрен и беспутен до крайности. Главною его слабостию была страсть к прекрасному полу; не редко за свои нежности получал он толчки, от которых охал по целым суткам. К тому же не был он (по его выражению) и врагом бутылки, т. е. (говоря по-русски) любил хлебнуть лишнее. Но как вино подавалось у нас только за обедом, и то по рюмочке, причем учителя обыкновенно и обносили, то мой Бопре очень скоро привык к русской настойке, и даже стал предпочитать ее винам своего отечества, как не в пример более полезную для желудка. Мы тотчас поладили, и хотя по контракту обязан он был учить меня по- французски, по-немецки и всем наукам, но он предпочел наскоро выучиться от меня кое-как болтать по-русски, — и потом каждый из нас занимался уже своим делом. Мы жили душа в душу. Другого ментора я и не желал. Но вскоре судьба нас разлучила, и вот по какому случаю:
# Прачка Палашка, толстая и рябая девка, и кривая коровница Акулька как-то согласились в одно время кинуться матушке в ноги, винясь в преступной слабости и с плачем жалуясь на мусье, обольстившего их неопытность. Матушка шутить этим не любила, и пожаловалась батюшке. У него расправа была коротка. Он тотчас потребовал каналью француза. Доложили, что мусье давал мне свой урок. Батюшка пошел в мою комнату. В это время Бопре спал на кровати сном невинности. Я был занят делом. Надобно знать, что для меня выписана была из Москвы географическая карта.
# """


async def summarization(text, size):
    """
    Сокращатель текста 2.0
    """
    # Шаг 2: Удаление стоп-слов и сохранение их в отдельном массиве слов.
    stop_words = set(stopwords.words("russian"))  # пакет стоп слов
    words = word_tokenize(text)  # преобразуем текст в токены (в списко слов)

    # Шаг 3: Создайте таблицу частотности слов.
    rate_table = (
        dict()
    )  # словарь с токенами и их частотой появления {'отец': 4, 'мать': 3}

    for word in words:  # все токены в книге
        word = word.lower()  # преобразует токен в нижний регистр
        if (
            word in stop_words
        ):  # проверяем, это стоп слово или нет, если стоп-слово, пропускаем его
            continue

        if word in rate_table:  # проверяем, если слово есть в таблице
            rate_table[word] += 1  # если есть, то прибавляем +1
        else:
            rate_table[word] = 1  # если нет, добавляем слово со значением 1

    # Шаг 4: Присвоение оценки каждому предложению в зависимости от
    # содержащихся в нем слов из таблицы частотности.

    sentences = sent_tokenize(
        text
    )  # токинезация по предложениями (разбивка по предложениями)
    sent_table = dict()
    # {
    #   "key": value
    # }

    for sentence in sentences:  # перебираем все предложения из текста
        for (
            word,
            rateting_word,
        ) in rate_table.items():  #  перебираем все слова и их количество
            if (
                word in sentence.lower()
            ):  # есть ли слово в предложении в нижнем регистре
                if sentence in sent_table:  # если есть предложение в таблице
                    sent_table[
                        sentence
                    ] += rateting_word  # считаем рейтинг предложения складывая сумму всех слов
                else:
                    sent_table[sentence] = rateting_word

    # Шаг 5: Назначаем определенную оценку для сравнения предложений.
    # Простым подходом для сравнения наших оценок будет нахождение средней оценки предложения.

    # Нахождение суммые всех предложений (общий бал всех предложений)
    sumValues = 0
    for sentence in sent_table:
        sumValues += sent_table[sentence]

    # Среднее значение предложения по сравнению с исходным текстом
    average = int(
        sumValues / len(sent_table)
    )  # находим среднее значение по всем предложениям

    print("Всего предложений:", len(sent_table))
    print("Среднее значение предложения по сравнению с исходным текстом:", average)

    summary = ""  # результат сжатия текста
    count_result = 0

    size_dict = {"short": 1.6, "long": 1.5}

    for sentence in sentences:  # перебираем все предложения
        if (sentence in sent_table) and (
            sent_table[sentence] > (size_dict[size] * average)
        ):
            # оставляем предложени, к которых рейтинг выше среднего на 20%
            summary += " " + sentence
            count_result += 1
    print("Выжимка предложений:", count_result)

    # print(summary)

    return summary


# summarization(text, 'short')
